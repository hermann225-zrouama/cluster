# 2. ClusterIssuer unique pour tout le cluster
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: fzrouama@amoaman.com
    privateKeySecretRef:
      name: letsencrypt-prod
      namespace: cert-manager
    solvers:
    - http01:
        ingress:
          class: nginx

---
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-staging
# spec:
#   acme:
#     server: https://acme-staging-v02.api.letsencrypt.org/directory
#     email: admin@tondomaine.com
#     privateKeySecretRef:
#       name: letsencrypt-staging
#       namespace: cert-manager
#     solvers:
#     - http01:
#         ingress:
#           class: nginx


# # 3. Ingress de DEV/TEST (utilise staging)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: app-dev-ingress
#   namespace: development
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     cert-manager.io/cluster-issuer: letsencrypt-staging  # STAGING
# spec:
#   tls:
#   - hosts:
#     - app-dev.tondomaine.com
#     secretName: app-dev-tls
#   rules:
#   - host: app-dev.tondomaine.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: app-service
#             port:
#               number: 80

# ---
# # 4. Ingress de PRODUCTION (utilise prod)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: app-prod-ingress
#   namespace: production
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     cert-manager.io/cluster-issuer: letsencrypt-prod  # PRODUCTION
# spec:
#   tls:
#   - hosts:
#     - app.tondomaine.com
#     secretName: app-prod-tls
#   rules:
#   - host: app.tondomaine.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: app-service
#             port:
#               number: 80